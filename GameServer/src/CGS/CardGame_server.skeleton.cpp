// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CardGame.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class CardGameHandler : virtual public CardGameIf {
 public:
  CardGameHandler() {
    // Your initialization goes here
  }

  void fetch_tables(std::vector<Table> & _return) {
    // Your implementation goes here
    printf("fetch_tables\n");
  }

  bool join_table(const int32_t table_id, const int32_t slot_id) {
    // Your implementation goes here
    printf("join_table\n");
  }

  void ready_confirm(const bool ready) {
    // Your implementation goes here
    printf("ready_confirm\n");
  }

  void play_card(TRM_OBJ& _return, const Method::type m, const TRM_OBJ& obj) {
    // Your implementation goes here
    printf("play_card\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<CardGameHandler> handler(new CardGameHandler());
  shared_ptr<TProcessor> processor(new CardGameProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

