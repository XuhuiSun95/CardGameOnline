/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GameLobby_H
#define GameLobby_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "cgo_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GameLobbyIf {
 public:
  virtual ~GameLobbyIf() {}
  virtual bool sign_up(const std::string& username, const std::string& password) = 0;
  virtual bool sign_in(const std::string& username, const std::string& password) = 0;
  virtual void fetch_game(Path& _return, const Game::type g) = 0;
};

class GameLobbyIfFactory {
 public:
  typedef GameLobbyIf Handler;

  virtual ~GameLobbyIfFactory() {}

  virtual GameLobbyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GameLobbyIf* /* handler */) = 0;
};

class GameLobbyIfSingletonFactory : virtual public GameLobbyIfFactory {
 public:
  GameLobbyIfSingletonFactory(const boost::shared_ptr<GameLobbyIf>& iface) : iface_(iface) {}
  virtual ~GameLobbyIfSingletonFactory() {}

  virtual GameLobbyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GameLobbyIf* /* handler */) {}

 protected:
  boost::shared_ptr<GameLobbyIf> iface_;
};

class GameLobbyNull : virtual public GameLobbyIf {
 public:
  virtual ~GameLobbyNull() {}
  bool sign_up(const std::string& /* username */, const std::string& /* password */) {
    bool _return = false;
    return _return;
  }
  bool sign_in(const std::string& /* username */, const std::string& /* password */) {
    bool _return = false;
    return _return;
  }
  void fetch_game(Path& /* _return */, const Game::type /* g */) {
    return;
  }
};

typedef struct _GameLobby_sign_up_args__isset {
  _GameLobby_sign_up_args__isset() : username(false), password(false) {}
  bool username :1;
  bool password :1;
} _GameLobby_sign_up_args__isset;

class GameLobby_sign_up_args {
 public:

  GameLobby_sign_up_args(const GameLobby_sign_up_args&);
  GameLobby_sign_up_args& operator=(const GameLobby_sign_up_args&);
  GameLobby_sign_up_args() : username(), password() {
  }

  virtual ~GameLobby_sign_up_args() throw();
  std::string username;
  std::string password;

  _GameLobby_sign_up_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const GameLobby_sign_up_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const GameLobby_sign_up_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLobby_sign_up_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameLobby_sign_up_pargs {
 public:


  virtual ~GameLobby_sign_up_pargs() throw();
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameLobby_sign_up_result__isset {
  _GameLobby_sign_up_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _GameLobby_sign_up_result__isset;

class GameLobby_sign_up_result {
 public:

  GameLobby_sign_up_result(const GameLobby_sign_up_result&);
  GameLobby_sign_up_result& operator=(const GameLobby_sign_up_result&);
  GameLobby_sign_up_result() : success(0) {
  }

  virtual ~GameLobby_sign_up_result() throw();
  bool success;
  InvalidOperation e;

  _GameLobby_sign_up_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const InvalidOperation& val);

  bool operator == (const GameLobby_sign_up_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const GameLobby_sign_up_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLobby_sign_up_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameLobby_sign_up_presult__isset {
  _GameLobby_sign_up_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _GameLobby_sign_up_presult__isset;

class GameLobby_sign_up_presult {
 public:


  virtual ~GameLobby_sign_up_presult() throw();
  bool* success;
  InvalidOperation e;

  _GameLobby_sign_up_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameLobby_sign_in_args__isset {
  _GameLobby_sign_in_args__isset() : username(false), password(false) {}
  bool username :1;
  bool password :1;
} _GameLobby_sign_in_args__isset;

class GameLobby_sign_in_args {
 public:

  GameLobby_sign_in_args(const GameLobby_sign_in_args&);
  GameLobby_sign_in_args& operator=(const GameLobby_sign_in_args&);
  GameLobby_sign_in_args() : username(), password() {
  }

  virtual ~GameLobby_sign_in_args() throw();
  std::string username;
  std::string password;

  _GameLobby_sign_in_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const GameLobby_sign_in_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const GameLobby_sign_in_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLobby_sign_in_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameLobby_sign_in_pargs {
 public:


  virtual ~GameLobby_sign_in_pargs() throw();
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameLobby_sign_in_result__isset {
  _GameLobby_sign_in_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _GameLobby_sign_in_result__isset;

class GameLobby_sign_in_result {
 public:

  GameLobby_sign_in_result(const GameLobby_sign_in_result&);
  GameLobby_sign_in_result& operator=(const GameLobby_sign_in_result&);
  GameLobby_sign_in_result() : success(0) {
  }

  virtual ~GameLobby_sign_in_result() throw();
  bool success;
  InvalidOperation e;

  _GameLobby_sign_in_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const InvalidOperation& val);

  bool operator == (const GameLobby_sign_in_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const GameLobby_sign_in_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLobby_sign_in_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameLobby_sign_in_presult__isset {
  _GameLobby_sign_in_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _GameLobby_sign_in_presult__isset;

class GameLobby_sign_in_presult {
 public:


  virtual ~GameLobby_sign_in_presult() throw();
  bool* success;
  InvalidOperation e;

  _GameLobby_sign_in_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameLobby_fetch_game_args__isset {
  _GameLobby_fetch_game_args__isset() : g(false) {}
  bool g :1;
} _GameLobby_fetch_game_args__isset;

class GameLobby_fetch_game_args {
 public:

  GameLobby_fetch_game_args(const GameLobby_fetch_game_args&);
  GameLobby_fetch_game_args& operator=(const GameLobby_fetch_game_args&);
  GameLobby_fetch_game_args() : g((Game::type)0) {
  }

  virtual ~GameLobby_fetch_game_args() throw();
  Game::type g;

  _GameLobby_fetch_game_args__isset __isset;

  void __set_g(const Game::type val);

  bool operator == (const GameLobby_fetch_game_args & rhs) const
  {
    if (!(g == rhs.g))
      return false;
    return true;
  }
  bool operator != (const GameLobby_fetch_game_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLobby_fetch_game_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameLobby_fetch_game_pargs {
 public:


  virtual ~GameLobby_fetch_game_pargs() throw();
  const Game::type* g;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameLobby_fetch_game_result__isset {
  _GameLobby_fetch_game_result__isset() : success(false) {}
  bool success :1;
} _GameLobby_fetch_game_result__isset;

class GameLobby_fetch_game_result {
 public:

  GameLobby_fetch_game_result(const GameLobby_fetch_game_result&);
  GameLobby_fetch_game_result& operator=(const GameLobby_fetch_game_result&);
  GameLobby_fetch_game_result() {
  }

  virtual ~GameLobby_fetch_game_result() throw();
  Path success;

  _GameLobby_fetch_game_result__isset __isset;

  void __set_success(const Path& val);

  bool operator == (const GameLobby_fetch_game_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameLobby_fetch_game_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLobby_fetch_game_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameLobby_fetch_game_presult__isset {
  _GameLobby_fetch_game_presult__isset() : success(false) {}
  bool success :1;
} _GameLobby_fetch_game_presult__isset;

class GameLobby_fetch_game_presult {
 public:


  virtual ~GameLobby_fetch_game_presult() throw();
  Path* success;

  _GameLobby_fetch_game_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GameLobbyClient : virtual public GameLobbyIf {
 public:
  GameLobbyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GameLobbyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool sign_up(const std::string& username, const std::string& password);
  void send_sign_up(const std::string& username, const std::string& password);
  bool recv_sign_up();
  bool sign_in(const std::string& username, const std::string& password);
  void send_sign_in(const std::string& username, const std::string& password);
  bool recv_sign_in();
  void fetch_game(Path& _return, const Game::type g);
  void send_fetch_game(const Game::type g);
  void recv_fetch_game(Path& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GameLobbyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GameLobbyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GameLobbyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sign_up(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sign_in(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetch_game(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GameLobbyProcessor(boost::shared_ptr<GameLobbyIf> iface) :
    iface_(iface) {
    processMap_["sign_up"] = &GameLobbyProcessor::process_sign_up;
    processMap_["sign_in"] = &GameLobbyProcessor::process_sign_in;
    processMap_["fetch_game"] = &GameLobbyProcessor::process_fetch_game;
  }

  virtual ~GameLobbyProcessor() {}
};

class GameLobbyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GameLobbyProcessorFactory(const ::boost::shared_ptr< GameLobbyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GameLobbyIfFactory > handlerFactory_;
};

class GameLobbyMultiface : virtual public GameLobbyIf {
 public:
  GameLobbyMultiface(std::vector<boost::shared_ptr<GameLobbyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GameLobbyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GameLobbyIf> > ifaces_;
  GameLobbyMultiface() {}
  void add(boost::shared_ptr<GameLobbyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool sign_up(const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sign_up(username, password);
    }
    return ifaces_[i]->sign_up(username, password);
  }

  bool sign_in(const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sign_in(username, password);
    }
    return ifaces_[i]->sign_in(username, password);
  }

  void fetch_game(Path& _return, const Game::type g) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetch_game(_return, g);
    }
    ifaces_[i]->fetch_game(_return, g);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GameLobbyConcurrentClient : virtual public GameLobbyIf {
 public:
  GameLobbyConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GameLobbyConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool sign_up(const std::string& username, const std::string& password);
  int32_t send_sign_up(const std::string& username, const std::string& password);
  bool recv_sign_up(const int32_t seqid);
  bool sign_in(const std::string& username, const std::string& password);
  int32_t send_sign_in(const std::string& username, const std::string& password);
  bool recv_sign_in(const int32_t seqid);
  void fetch_game(Path& _return, const Game::type g);
  int32_t send_fetch_game(const Game::type g);
  void recv_fetch_game(Path& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
