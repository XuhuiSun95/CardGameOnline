/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CardGame_H
#define CardGame_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "cg_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CardGameIf {
 public:
  virtual ~CardGameIf() {}
  virtual void fetch_tables(std::vector<Table> & _return) = 0;
  virtual bool join_table(const int32_t table_id, const int32_t slot_id) = 0;
  virtual void ready_confirm(const bool ready) = 0;
  virtual void play_card(TRM_OBJ& _return, const Method::type m, const TRM_OBJ& obj) = 0;
};

class CardGameIfFactory {
 public:
  typedef CardGameIf Handler;

  virtual ~CardGameIfFactory() {}

  virtual CardGameIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CardGameIf* /* handler */) = 0;
};

class CardGameIfSingletonFactory : virtual public CardGameIfFactory {
 public:
  CardGameIfSingletonFactory(const boost::shared_ptr<CardGameIf>& iface) : iface_(iface) {}
  virtual ~CardGameIfSingletonFactory() {}

  virtual CardGameIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CardGameIf* /* handler */) {}

 protected:
  boost::shared_ptr<CardGameIf> iface_;
};

class CardGameNull : virtual public CardGameIf {
 public:
  virtual ~CardGameNull() {}
  void fetch_tables(std::vector<Table> & /* _return */) {
    return;
  }
  bool join_table(const int32_t /* table_id */, const int32_t /* slot_id */) {
    bool _return = false;
    return _return;
  }
  void ready_confirm(const bool /* ready */) {
    return;
  }
  void play_card(TRM_OBJ& /* _return */, const Method::type /* m */, const TRM_OBJ& /* obj */) {
    return;
  }
};


class CardGame_fetch_tables_args {
 public:

  CardGame_fetch_tables_args(const CardGame_fetch_tables_args&);
  CardGame_fetch_tables_args& operator=(const CardGame_fetch_tables_args&);
  CardGame_fetch_tables_args() {
  }

  virtual ~CardGame_fetch_tables_args() throw();

  bool operator == (const CardGame_fetch_tables_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CardGame_fetch_tables_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CardGame_fetch_tables_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CardGame_fetch_tables_pargs {
 public:


  virtual ~CardGame_fetch_tables_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CardGame_fetch_tables_result__isset {
  _CardGame_fetch_tables_result__isset() : success(false) {}
  bool success :1;
} _CardGame_fetch_tables_result__isset;

class CardGame_fetch_tables_result {
 public:

  CardGame_fetch_tables_result(const CardGame_fetch_tables_result&);
  CardGame_fetch_tables_result& operator=(const CardGame_fetch_tables_result&);
  CardGame_fetch_tables_result() {
  }

  virtual ~CardGame_fetch_tables_result() throw();
  std::vector<Table>  success;

  _CardGame_fetch_tables_result__isset __isset;

  void __set_success(const std::vector<Table> & val);

  bool operator == (const CardGame_fetch_tables_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CardGame_fetch_tables_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CardGame_fetch_tables_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CardGame_fetch_tables_presult__isset {
  _CardGame_fetch_tables_presult__isset() : success(false) {}
  bool success :1;
} _CardGame_fetch_tables_presult__isset;

class CardGame_fetch_tables_presult {
 public:


  virtual ~CardGame_fetch_tables_presult() throw();
  std::vector<Table> * success;

  _CardGame_fetch_tables_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CardGame_join_table_args__isset {
  _CardGame_join_table_args__isset() : table_id(false), slot_id(false) {}
  bool table_id :1;
  bool slot_id :1;
} _CardGame_join_table_args__isset;

class CardGame_join_table_args {
 public:

  CardGame_join_table_args(const CardGame_join_table_args&);
  CardGame_join_table_args& operator=(const CardGame_join_table_args&);
  CardGame_join_table_args() : table_id(0), slot_id(0) {
  }

  virtual ~CardGame_join_table_args() throw();
  int32_t table_id;
  int32_t slot_id;

  _CardGame_join_table_args__isset __isset;

  void __set_table_id(const int32_t val);

  void __set_slot_id(const int32_t val);

  bool operator == (const CardGame_join_table_args & rhs) const
  {
    if (!(table_id == rhs.table_id))
      return false;
    if (!(slot_id == rhs.slot_id))
      return false;
    return true;
  }
  bool operator != (const CardGame_join_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CardGame_join_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CardGame_join_table_pargs {
 public:


  virtual ~CardGame_join_table_pargs() throw();
  const int32_t* table_id;
  const int32_t* slot_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CardGame_join_table_result__isset {
  _CardGame_join_table_result__isset() : success(false) {}
  bool success :1;
} _CardGame_join_table_result__isset;

class CardGame_join_table_result {
 public:

  CardGame_join_table_result(const CardGame_join_table_result&);
  CardGame_join_table_result& operator=(const CardGame_join_table_result&);
  CardGame_join_table_result() : success(0) {
  }

  virtual ~CardGame_join_table_result() throw();
  bool success;

  _CardGame_join_table_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CardGame_join_table_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CardGame_join_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CardGame_join_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CardGame_join_table_presult__isset {
  _CardGame_join_table_presult__isset() : success(false) {}
  bool success :1;
} _CardGame_join_table_presult__isset;

class CardGame_join_table_presult {
 public:


  virtual ~CardGame_join_table_presult() throw();
  bool* success;

  _CardGame_join_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CardGame_ready_confirm_args__isset {
  _CardGame_ready_confirm_args__isset() : ready(false) {}
  bool ready :1;
} _CardGame_ready_confirm_args__isset;

class CardGame_ready_confirm_args {
 public:

  CardGame_ready_confirm_args(const CardGame_ready_confirm_args&);
  CardGame_ready_confirm_args& operator=(const CardGame_ready_confirm_args&);
  CardGame_ready_confirm_args() : ready(0) {
  }

  virtual ~CardGame_ready_confirm_args() throw();
  bool ready;

  _CardGame_ready_confirm_args__isset __isset;

  void __set_ready(const bool val);

  bool operator == (const CardGame_ready_confirm_args & rhs) const
  {
    if (!(ready == rhs.ready))
      return false;
    return true;
  }
  bool operator != (const CardGame_ready_confirm_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CardGame_ready_confirm_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CardGame_ready_confirm_pargs {
 public:


  virtual ~CardGame_ready_confirm_pargs() throw();
  const bool* ready;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CardGame_ready_confirm_result {
 public:

  CardGame_ready_confirm_result(const CardGame_ready_confirm_result&);
  CardGame_ready_confirm_result& operator=(const CardGame_ready_confirm_result&);
  CardGame_ready_confirm_result() {
  }

  virtual ~CardGame_ready_confirm_result() throw();

  bool operator == (const CardGame_ready_confirm_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CardGame_ready_confirm_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CardGame_ready_confirm_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CardGame_ready_confirm_presult {
 public:


  virtual ~CardGame_ready_confirm_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CardGame_play_card_args__isset {
  _CardGame_play_card_args__isset() : m(false), obj(false) {}
  bool m :1;
  bool obj :1;
} _CardGame_play_card_args__isset;

class CardGame_play_card_args {
 public:

  CardGame_play_card_args(const CardGame_play_card_args&);
  CardGame_play_card_args& operator=(const CardGame_play_card_args&);
  CardGame_play_card_args() : m((Method::type)0) {
  }

  virtual ~CardGame_play_card_args() throw();
  Method::type m;
  TRM_OBJ obj;

  _CardGame_play_card_args__isset __isset;

  void __set_m(const Method::type val);

  void __set_obj(const TRM_OBJ& val);

  bool operator == (const CardGame_play_card_args & rhs) const
  {
    if (!(m == rhs.m))
      return false;
    if (!(obj == rhs.obj))
      return false;
    return true;
  }
  bool operator != (const CardGame_play_card_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CardGame_play_card_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CardGame_play_card_pargs {
 public:


  virtual ~CardGame_play_card_pargs() throw();
  const Method::type* m;
  const TRM_OBJ* obj;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CardGame_play_card_result__isset {
  _CardGame_play_card_result__isset() : success(false) {}
  bool success :1;
} _CardGame_play_card_result__isset;

class CardGame_play_card_result {
 public:

  CardGame_play_card_result(const CardGame_play_card_result&);
  CardGame_play_card_result& operator=(const CardGame_play_card_result&);
  CardGame_play_card_result() {
  }

  virtual ~CardGame_play_card_result() throw();
  TRM_OBJ success;

  _CardGame_play_card_result__isset __isset;

  void __set_success(const TRM_OBJ& val);

  bool operator == (const CardGame_play_card_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CardGame_play_card_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CardGame_play_card_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CardGame_play_card_presult__isset {
  _CardGame_play_card_presult__isset() : success(false) {}
  bool success :1;
} _CardGame_play_card_presult__isset;

class CardGame_play_card_presult {
 public:


  virtual ~CardGame_play_card_presult() throw();
  TRM_OBJ* success;

  _CardGame_play_card_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CardGameClient : virtual public CardGameIf {
 public:
  CardGameClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CardGameClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void fetch_tables(std::vector<Table> & _return);
  void send_fetch_tables();
  void recv_fetch_tables(std::vector<Table> & _return);
  bool join_table(const int32_t table_id, const int32_t slot_id);
  void send_join_table(const int32_t table_id, const int32_t slot_id);
  bool recv_join_table();
  void ready_confirm(const bool ready);
  void send_ready_confirm(const bool ready);
  void recv_ready_confirm();
  void play_card(TRM_OBJ& _return, const Method::type m, const TRM_OBJ& obj);
  void send_play_card(const Method::type m, const TRM_OBJ& obj);
  void recv_play_card(TRM_OBJ& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CardGameProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CardGameIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CardGameProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_fetch_tables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_join_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ready_confirm(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_play_card(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CardGameProcessor(boost::shared_ptr<CardGameIf> iface) :
    iface_(iface) {
    processMap_["fetch_tables"] = &CardGameProcessor::process_fetch_tables;
    processMap_["join_table"] = &CardGameProcessor::process_join_table;
    processMap_["ready_confirm"] = &CardGameProcessor::process_ready_confirm;
    processMap_["play_card"] = &CardGameProcessor::process_play_card;
  }

  virtual ~CardGameProcessor() {}
};

class CardGameProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CardGameProcessorFactory(const ::boost::shared_ptr< CardGameIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CardGameIfFactory > handlerFactory_;
};

class CardGameMultiface : virtual public CardGameIf {
 public:
  CardGameMultiface(std::vector<boost::shared_ptr<CardGameIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CardGameMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CardGameIf> > ifaces_;
  CardGameMultiface() {}
  void add(boost::shared_ptr<CardGameIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void fetch_tables(std::vector<Table> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetch_tables(_return);
    }
    ifaces_[i]->fetch_tables(_return);
    return;
  }

  bool join_table(const int32_t table_id, const int32_t slot_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->join_table(table_id, slot_id);
    }
    return ifaces_[i]->join_table(table_id, slot_id);
  }

  void ready_confirm(const bool ready) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ready_confirm(ready);
    }
    ifaces_[i]->ready_confirm(ready);
  }

  void play_card(TRM_OBJ& _return, const Method::type m, const TRM_OBJ& obj) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->play_card(_return, m, obj);
    }
    ifaces_[i]->play_card(_return, m, obj);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CardGameConcurrentClient : virtual public CardGameIf {
 public:
  CardGameConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CardGameConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void fetch_tables(std::vector<Table> & _return);
  int32_t send_fetch_tables();
  void recv_fetch_tables(std::vector<Table> & _return, const int32_t seqid);
  bool join_table(const int32_t table_id, const int32_t slot_id);
  int32_t send_join_table(const int32_t table_id, const int32_t slot_id);
  bool recv_join_table(const int32_t seqid);
  void ready_confirm(const bool ready);
  int32_t send_ready_confirm(const bool ready);
  void recv_ready_confirm(const int32_t seqid);
  void play_card(TRM_OBJ& _return, const Method::type m, const TRM_OBJ& obj);
  int32_t send_play_card(const Method::type m, const TRM_OBJ& obj);
  void recv_play_card(TRM_OBJ& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
